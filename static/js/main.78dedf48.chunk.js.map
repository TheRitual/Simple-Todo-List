{"version":3,"sources":["reportWebVitals.js","GlobalStyles.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Tasks.js","App.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","features/tasks/rootSaga.js","store.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyles","createGlobalStyle","localStorageKey","saveTaskInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleTaskDone","taskID","index","findIndex","id","done","toggleAllDone","forEach","removeTask","splice","toggleHideDone","state","fetchExampleTasks","setTasks","map","nanoid","addMultipleTasks","removeAll","store","actions","selectTasksState","selectTasks","selectHideDone","selectAreAllTasksDone","every","selectIsAnyTaskDone","some","selectAreTasksEmpty","length","NewTaskForm","styled","form","NewTaskInput","input","NewTaskButton","button","Form","useState","newTaskContent","setNewTaskContent","dispatch","useDispatch","inputRef","useRef","onSubmit","event","preventDefault","current","focus","content","replace","trim","autoFocus","placeholder","value","onChange","target","ref","ButtonsContainer","div","Button","Buttons","useSelector","areAllDone","isAnyDone","onClick","disabled","StyledSection","section","SectionHeader","header","SectionTitle","h2","SectionBody","Section","title","body","extraHeaderContent","Header","Container","main","StyledTaskList","ul","TaskItem","li","hidden","css","TaskButton","removeButton","TaskContent","span","TaskList","Tasks","App","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTaskHandler","saveTaskInLocalStorageHandler","tasksSaga","call","sampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78dedf48.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n    html {\n        box-sizing: border-box;\n        -webkit-font-smoothing: antialiased;\n    }\n\n    *,\n    ::after,\n    ::before {\n        box-sizing: inherit;\n        -webkit-font-smoothing: inherit;\n    }\n\n    body {\n        background-color: #e8e8ee;\n        font-family: 'Montserrat', sans-serif;\n        margin: 0;\n    }\n\n    input {\n        font-family: 'Montserrat', sans-serif;\n    }\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTaskInLocalStorage = tasks => {\r\n    return localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n}\r\n\r\nexport const getTaskFromLocalStorage = () => {\r\n    return JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { getTaskFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTaskFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskID }) => {\r\n            const index = tasks.findIndex(task => task.id === taskID);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        toggleAllDone: ({ tasks }) => {\r\n            tasks.forEach(task => task.done = true);\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskID }) => {\r\n            const index = tasks.findIndex(task => task.id === taskID);\r\n            tasks.splice(index, 1);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks.map(task => {\r\n                return { ...task, id: nanoid() };\r\n            });;\r\n        },\r\n        addMultipleTasks: ({ tasks }, { payload: newTasks }) => {\r\n            newTasks.forEach(task => tasks.push({ ...task, id: nanoid() }));\r\n        },\r\n        removeAll: (store) => {\r\n            store.tasks = [];\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addTask, toggleTaskDone, toggleAllDone, removeTask, toggleHideDone, fetchExampleTasks, addMultipleTasks, setTasks, removeAll } = tasksSlice.actions;\r\n\r\nexport const selectTasksState = state => state.tasks;\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreAllTasksDone = state => selectTasks(state).every(task => task.done);\r\nexport const selectIsAnyTaskDone = state => selectTasks(state).some(task => task.done);\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const NewTaskForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n    \r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const NewTaskInput = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n`;\r\n\r\n\r\nexport const NewTaskButton = styled.button`\r\n    border:none;\r\n    background-color: #008080;\r\n    color: #fff;\r\n    padding: 10px;\r\n    transition: 0.3s;\r\n    \r\n    &:hover {\r\n        background-color: rgb(0, 153, 153);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        background-color: rgb(0, 179, 179);\r\n    }\r\n`;","import { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { useRef, useState } from \"react\";\r\nimport { NewTaskForm, NewTaskInput, NewTaskButton } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n    const inputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        inputRef.current.focus();\r\n        const content = newTaskContent.replace(/ +(?= )/g, '').trim();\r\n        setNewTaskContent(content);\r\n        if (content !== \"\") {\r\n            dispatch(addTask({\r\n                content: newTaskContent,\r\n                done: false,\r\n                id: nanoid(),\r\n            }));\r\n            setNewTaskContent(\"\");\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <NewTaskForm onSubmit={onFormSubmit}>\r\n            <NewTaskInput\r\n                autoFocus\r\n                placeholder=\"What to do?\"\r\n                value={newTaskContent}\r\n                onChange={(event) => setNewTaskContent(event.target.value)}\r\n                ref={inputRef}\r\n            />\r\n            <NewTaskButton>Add Task</NewTaskButton>\r\n        </NewTaskForm>);\r\n};\r\n\r\nexport default Form;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`    \r\n    background: transparent;\r\n    color: teal;\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n\r\n    @media(max-width: 767px) {\r\n        flex-basis: 100%;\r\n    }\r\n\r\n    &:hover {\r\n        color: hsl(180, 100%, 35%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: #ccc;\r\n    }\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { removeAll, selectAreAllTasksDone, selectAreTasksEmpty, selectHideDone, selectIsAnyTaskDone, toggleAllDone, toggleHideDone } from \"../tasksSlice\";\r\nimport { ButtonsContainer, Button } from \"./styled\";\r\nimport { fetchExampleTasks } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const hideDone = useSelector(selectHideDone);\r\n    const areAllDone = useSelector(selectAreAllTasksDone);\r\n    const isAnyDone = useSelector(selectIsAnyTaskDone);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ButtonsContainer>\r\n            <Button onClick={() => dispatch(fetchExampleTasks())}> Get Sample Tasks </Button>\r\n            {!useSelector(selectAreTasksEmpty) && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())} disabled={!isAnyDone}>\r\n                        {hideDone ? \"Show\" : \"Hide\"} done\r\n                    </Button>\r\n                    <Button onClick={() => dispatch(toggleAllDone())} disabled={areAllDone}>\r\n                        Mark All as Done\r\n                    </Button>\r\n                    <Button onClick={() => dispatch(removeAll())}>\r\n                        Remove All\r\n                    </Button>\r\n                </>)\r\n            }\r\n        </ButtonsContainer>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    margin: 10px 0;\r\n    background: white;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const SectionHeader = styled.header`\r\n    border-bottom: 1px solid #ddd;\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    @media(max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n    \r\nexport const SectionBody = styled.div`\r\n    padding: 20px;\r\n`","import { StyledSection, SectionBody, SectionHeader, SectionTitle } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <SectionHeader>\r\n            <SectionTitle>{title}</SectionTitle>\r\n            {extraHeaderContent}\r\n        </SectionHeader>\r\n        <SectionBody>\r\n            {body}\r\n        </SectionBody>\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","const Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledTaskList = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const TaskItem = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const TaskButton = styled.button`\r\n    border: 0;\r\n    width: 30px;\r\n    height: 30px;\r\n    color: #fff;\r\n    padding: 0;\r\n    transition: 0.3s;\r\n    cursor: pointer;\r\n\r\n    ${({ done }) => done && css`\r\n        background-color: hsl(120, 61%, 34%);\r\n        &:hover {\r\n            background-color: hsl(120, 61%, 39%);\r\n        }\r\n    `}\r\n\r\n    ${({ removeButton }) => removeButton && css`\r\n        background-color: hsl(348, 83%, 47%);\r\n        &:hover {\r\n            background-color: hsl(348, 83%, 52%);\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const TaskContent = styled.span`\r\n    color: #000;\r\n    transition: 0.5s;\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n        color: #999;\r\n    `}\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { removeTask, selectTasksState, toggleTaskDone } from \"../tasksSlice\";\r\nimport { TaskItem, TaskButton, TaskContent, StyledTaskList } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n    const { hideDone, tasks } = useSelector(selectTasksState);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <StyledTaskList>\r\n            {tasks.map(task => (\r\n                <TaskItem key={task.id} hidden={task.done && hideDone}>\r\n                    <TaskButton onClick={() => dispatch(toggleTaskDone(task.id))} done>\r\n                        {task.done ? '✓' : ''}\r\n                    </TaskButton>\r\n                    <TaskContent done={task.done}>\r\n                        {task.content}\r\n                    </TaskContent>\r\n                    <TaskButton onClick={() => dispatch(removeTask(task.id))} removeButton>🗑</TaskButton>\r\n                </TaskItem>\r\n            ))}\r\n        </StyledTaskList>\r\n    );\r\n}\r\n\r\nexport default TaskList;","import Form from \"./Form\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport { Container } from \"../../common/Container/styled\";\nimport TaskList from \"./TaskList\";\n\nfunction Tasks() {\n\n  return (\n    <Container>\n      <Header title=\"ToDo List\" />\n      <Section title=\"Add a new Task\" body={<Form />} />\n      <Section\n        title=\"List of Tasks\"\n        extraHeaderContent={<Buttons />}\n        body={<TaskList />}\n      />\n    </Container>\n  );\n}\n\nexport default Tasks;\n","import Tasks from \"./features/tasks/Tasks\";\r\n\r\nconst App = () => <Tasks/>;\r\n\r\nexport default App;","export const getExampleTasks = async () => {\r\n    \r\n    const response = await fetch(\"/SimpleToDoList/exampleTasks.json\");\r\n    if (!response.ok) {\r\n        new Error((response).statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeLatest, takeEvery, call, put, select } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTaskInLocalStorage } from \"./tasksLocalStorage\";\r\nimport { addMultipleTasks, fetchExampleTasks, selectTasks } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTaskHandler() {\r\n    try {\r\n        const sampleTasks = yield call(getExampleTasks);\r\n        yield put(addMultipleTasks(sampleTasks));\r\n    } catch (error) {\r\n        call(alert, \"Something went wrong!\");\r\n    }\r\n}\r\n\r\nfunction* saveTaskInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTaskInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTaskHandler);\r\n    yield takeEvery(\"*\", saveTaskInLocalStorageHandler);\r\n}","import { all } from \"@redux-saga/core/effects\";\r\nimport { tasksSaga } from \"./tasksSaga\";\r\n\r\nfunction* rootSaga () {\r\n    yield all([\r\n        tasksSaga(),\r\n    ])\r\n}\r\n\r\nexport default rootSaga;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"@redux-saga/core\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport rootSaga from \"./features/tasks/rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware]\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { GlobalStyles } from \"./GlobalStyles\";\nimport App from \"./App\";\nimport store from \"./store\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}