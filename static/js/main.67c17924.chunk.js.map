{"version":3,"sources":["reportWebVitals.js","GlobalStyles.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Tasks.js","App.js","store.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyles","createGlobalStyle","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","task","payload","push","toggleTaskDone","taskID","index","findIndex","id","done","toggleAllDone","forEach","removeTask","splice","toggleHideDone","state","actions","selectTasks","NewTaskForm","styled","form","NewTaskInput","input","NewTaskButton","button","Form","useState","newTaskContent","setNewTaskContent","dispatch","useDispatch","inputRef","useRef","onSubmit","event","preventDefault","current","focus","content","replace","trim","nanoid","autoFocus","placeholder","value","onChange","target","ref","ButtonsContainer","div","Button","Buttons","useSelector","length","onClick","disabled","every","StyledSection","section","SectionHeader","header","SectionTitle","h2","SectionBody","Section","title","body","extraHeaderContent","Header","Container","main","StyledTaskList","ul","TaskItem","li","hidden","css","TaskButton","removeButton","TaskContent","span","TaskList","map","Tasks","App","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.67c17924.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n    html {\n        box-sizing: border-box;\n        -webkit-font-smoothing: antialiased;\n    }\n\n    *,\n    ::after,\n    ::before {\n        box-sizing: inherit;\n        -webkit-font-smoothing: inherit;\n    }\n\n    body {\n        background-color: #e8e8ee;\n        font-family: 'Montserrat', sans-serif;\n        margin: 0;\n    }\n\n    input {\n        font-family: 'Montserrat', sans-serif;\n    }\n`;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskID }) => {\r\n            const index = tasks.findIndex(task => task.id === taskID);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        toggleAllDone: ({ tasks }) => {\r\n            tasks.forEach(task => task.done = true);\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskID }) => {\r\n            const index = tasks.findIndex(task => task.id === taskID);\r\n            tasks.splice(index, 1);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n    }\r\n});\r\n\r\nexport const { addTask, toggleTaskDone, toggleAllDone, removeTask, toggleHideDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const NewTaskForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n    \r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const NewTaskInput = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n`;\r\n\r\n\r\nexport const NewTaskButton = styled.button`\r\n    border:none;\r\n    background-color: #008080;\r\n    color: #fff;\r\n    padding: 10px;\r\n    transition: 0.3s;\r\n    \r\n    &:hover {\r\n        background-color: rgb(0, 153, 153);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        background-color: rgb(0, 179, 179);\r\n    }\r\n`;","import { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { useRef, useState } from \"react\";\r\nimport { NewTaskForm, NewTaskInput, NewTaskButton } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n    const inputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        inputRef.current.focus();\r\n        const content = newTaskContent.replace(/ +(?= )/g, '').trim();\r\n        setNewTaskContent(content);\r\n        if (content !== \"\") {\r\n            dispatch(addTask({\r\n                content: newTaskContent,\r\n                done: false,\r\n                id: nanoid(),\r\n            }));\r\n            setNewTaskContent(\"\");\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <NewTaskForm onSubmit={onFormSubmit}>\r\n            <NewTaskInput\r\n                autoFocus\r\n                placeholder=\"What to do?\"\r\n                value={newTaskContent}\r\n                onChange={(event) => setNewTaskContent(event.target.value)}\r\n                ref={inputRef}\r\n            />\r\n            <NewTaskButton>Add Task</NewTaskButton>\r\n        </NewTaskForm>);\r\n};\r\n\r\nexport default Form;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`    \r\n    background: transparent;\r\n    color: teal;\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n\r\n    @media(max-width: 767px) {\r\n        flex-basis: 100%;\r\n    }\r\n\r\n    &:hover {\r\n        color: hsl(180, 100%, 35%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: #ccc;\r\n    }\r\n`;","import { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectTasks, toggleAllDone, toggleHideDone } from \"../tasksSlice\";\r\nimport { ButtonsContainer, Button } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return tasks.length > 0 && (\r\n        <ButtonsContainer>\r\n            <Button onClick={() => dispatch(toggleHideDone())}>\r\n                {hideDone ? \"Show\" : \"Hide\"} done\r\n            </Button>\r\n            <Button onClick={() => dispatch(toggleAllDone())} disabled={tasks.every(({ done }) => done)}>\r\n                Mark All as Done\r\n            </Button>\r\n        </ButtonsContainer>);\r\n\r\n}\r\n\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    margin: 10px 0;\r\n    background: white;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const SectionHeader = styled.header`\r\n    border-bottom: 1px solid #ddd;\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    @media(max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n    \r\nexport const SectionBody = styled.div`\r\n    padding: 20px;\r\n`","import { StyledSection, SectionBody, SectionHeader, SectionTitle } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <SectionHeader>\r\n            <SectionTitle>{title}</SectionTitle>\r\n            {extraHeaderContent}\r\n        </SectionHeader>\r\n        <SectionBody>\r\n            {body}\r\n        </SectionBody>\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","const Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledTaskList = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const TaskItem = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const TaskButton = styled.button`\r\n    border: 0;\r\n    width: 30px;\r\n    height: 30px;\r\n    color: #fff;\r\n    padding: 0;\r\n    transition: 0.3s;\r\n    cursor: pointer;\r\n\r\n    ${({ done }) => done && css`\r\n        background-color: hsl(120, 61%, 34%);\r\n        &:hover {\r\n            background-color: hsl(120, 61%, 39%);\r\n        }\r\n    `}\r\n\r\n    ${({ removeButton }) => removeButton && css`\r\n        background-color: hsl(348, 83%, 47%);\r\n        &:hover {\r\n            background-color: hsl(348, 83%, 52%);\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const TaskContent = styled.span`\r\n    color: #000;\r\n    transition: 0.5s;\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n        color: #999;\r\n    `}\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { removeTask, selectTasks, toggleTaskDone } from \"../tasksSlice\";\r\nimport { TaskItem, TaskButton, TaskContent, StyledTaskList } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n    const { hideDone, tasks } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <StyledTaskList>\r\n            {tasks.map(task => (\r\n                <TaskItem key={task.id} hidden={task.done && hideDone}>\r\n                    <TaskButton onClick={() => dispatch(toggleTaskDone(task.id))} done>\r\n                        {task.done ? '✓' : ''}\r\n                    </TaskButton>\r\n                    <TaskContent done={task.done}>\r\n                        {task.content}\r\n                    </TaskContent>\r\n                    <TaskButton onClick={() => dispatch(removeTask(task.id))} removeButton>🗑</TaskButton>\r\n                </TaskItem>\r\n            ))}\r\n        </StyledTaskList>\r\n    );\r\n}\r\n\r\nexport default TaskList;","import Form from \"./Form\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport { Container } from \"../../common/Container/styled\";\nimport TaskList from \"./TaskList\";\n\nfunction Tasks() {\n\n  return (\n    <Container>\n      <Header title=\"ToDo List\" />\n      <Section title=\"Add a new Task\" body={<Form />} />\n      <Section\n        title=\"List of Tasks\"\n        extraHeaderContent={<Buttons />}\n        body={<TaskList />}\n      />\n    </Container>\n  );\n}\n\nexport default Tasks;\n","import Tasks from \"./features/tasks/Tasks\";\r\n\r\nconst App = () => <Tasks/>;\r\n\r\nexport default App;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n     reducer: {\r\n         tasks: tasksReducer,\r\n     },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { GlobalStyles } from \"./GlobalStyles\";\nimport App from \"./App\";\nimport store from \"./store\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}