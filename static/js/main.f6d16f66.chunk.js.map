{"version":3,"sources":["reportWebVitals.js","GlobalStyles.js","common/Container/styled.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/themeSwitch/themeLocalStorage.js","features/themeSwitch/themeSlice.js","features/themeSwitch/ThemeSwitch/styled.js","features/themeSwitch/ThemeSwitch/index.js","features/author/Information/styled.js","features/author/Information/index.js","features/author/Author.js","common/Menu/styled.js","common/Menu/index.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Tasks.js","common/AppWrapper/index.js","utils/themes.js","App.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","features/themeSwitch/themeSaga.js","rootSaga.js","store.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyles","createGlobalStyle","Container","styled","main","theme","colors","defaultText","transitions","long","Header","title","StyledSection","section","secondary","shadow","SectionHeader","header","borders","SectionTitle","h2","SectionBody","div","short","Section","body","extraHeaderContent","localStorageKey","saveThemeInLocalStorage","localStorage","setItem","JSON","stringify","themeSlice","createSlice","name","initialState","isDarkThemeOn","parse","getItem","reducers","toggleTheme","store","console","log","actions","selectIsDarkThemeOn","state","selectThemeState","ToggleSlider","label","disabled","primaryText","Toggle","input","primary","ToggleContainer","ThemeSwitch","useSelector","dispatch","useDispatch","onChange","checked","id","type","htmlFor","Paragraph","p","Information","Author","LinkList","ul","LinkItem","li","secondaryText","Menu","to","saveTaskInLocalStorage","tasks","tasksSlice","hideDone","addTask","task","payload","push","toggleTaskDone","taskID","index","findIndex","done","toggleAllDone","forEach","removeTask","splice","toggleHideDone","fetchExampleTasks","setTasks","map","nanoid","addMultipleTasks","removeAll","selectTasksState","selectTasks","selectHideDone","selectAreAllTasksDone","every","selectIsAnyTaskDone","some","selectAreTasksEmpty","length","NewTaskForm","form","NewTaskInput","NewTaskButton","button","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","current","focus","content","replace","trim","autoFocus","placeholder","value","target","ref","ButtonsContainer","Button","middle","Buttons","areAllDone","isAnyDone","onClick","StyledTaskList","TaskItem","hidden","css","TaskButton","doneBox","removeButton","removeBox","TaskContent","span","TaskList","Tasks","AppWrapper","mainBackground","defaultTheme","background","darkTheme","App","selectedTheme","path","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTaskHandler","saveTaskInLocalStorageHandler","tasksSaga","call","sampleTasks","put","alert","select","takeLatest","takeEvery","saveThemeInLocalStorageHandler","themeSaga","rootSaga","all","sagaMiddleware","createSagaMiddleware","configureStore","reducer","tasksReducer","themeReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6d16f66.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n    html {\n        box-sizing: border-box;\n        -webkit-font-smoothing: antialiased;\n    }\n\n    *,\n    ::after,\n    ::before {\n        box-sizing: inherit;\n        -webkit-font-smoothing: inherit;\n    }\n\n    body {\n        font-family: 'Montserrat', sans-serif;\n        margin: 0;\n    }\n\n    input {\n        font-family: 'Montserrat', sans-serif;\n    }\n`;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n    color: ${({ theme }) => theme.colors.defaultText};\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n    transition: ${({ theme }) => theme.transitions.long} ease-in-out;\r\n`;","const Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.colors.secondary};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.colors.shadow};\r\n    transition: ${({ theme }) => theme.transitions.long} ease-in-out;\r\n`;\r\n\r\nexport const SectionHeader = styled.header`\r\n    border-bottom: 1px solid ${({ theme }) => theme.colors.borders};\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    @media(max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n    color: ${({ theme }) => theme.colors.defaultText};\r\n    transition: ${({ theme }) => theme.transitions.long} ease-in-out;\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n    padding: 20px;\r\n    transition: ${({ theme }) => theme.transitions.short} ease-in-out;\r\n`","import { StyledSection, SectionBody, SectionHeader, SectionTitle } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <SectionHeader>\r\n            <SectionTitle>{title}</SectionTitle>\r\n            {extraHeaderContent}\r\n        </SectionHeader>\r\n        <SectionBody>\r\n            {body}\r\n        </SectionBody>\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","const localStorageKey = \"theme\";\r\n\r\nexport const saveThemeInLocalStorage = theme => {\r\n    return localStorage.setItem(localStorageKey, JSON.stringify(theme));\r\n}\r\n\r\nexport const getThemeFromLocalStorage = () => {\r\n    return JSON.parse(localStorage.getItem(localStorageKey)) || false;\r\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getThemeFromLocalStorage } from \"./themeLocalStorage\";\r\n\r\nconst themeSlice = createSlice({\r\n    name: 'theme',\r\n    initialState: {\r\n        isDarkThemeOn: getThemeFromLocalStorage(),\r\n    },\r\n    reducers: {\r\n        toggleTheme: (store) => {\r\n            store.isDarkThemeOn = !store.isDarkThemeOn;\r\n            console.log(store.isDarkThemeOn);\r\n        }\r\n    }\r\n});\r\n\r\nexport const { toggleTheme } = themeSlice.actions;\r\n\r\nexport const selectThemeState = state => { console.log(state); return state.theme;}\r\nexport const selectIsDarkThemeOn = state => selectThemeState(state).isDarkThemeOn;\r\nexport default themeSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const ToggleSlider = styled.label`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 42px;\r\n    height: 26px;\r\n    border-radius: 5px;\r\n    background: ${({ theme }) => theme.colors.disabled};\r\n    cursor: pointer;\r\n    &::after {\r\n        content: \"\";\r\n        display: block;\r\n        border-radius: 5px;\r\n        width: 18px;\r\n        height: 18px;\r\n        margin: 3px;\r\n        background: ${({ theme }) => theme.colors.primaryText};;\r\n        transition: ${({ theme }) => theme.transitions.short};\r\n    }\r\n`;\r\n\r\nexport const Toggle = styled.input`\r\n    opacity: 0;\r\n    z-index: 1;\r\n    border-radius: 5px;\r\n    width: 42px;\r\n    height: 26px;\r\n    &:checked + ${ToggleSlider} {\r\n        background: ${({ theme }) => theme.colors.primary};;\r\n        &::after {\r\n            content: \"\";\r\n            display: block;\r\n            border-radius: 5px;\r\n            width: 18px;\r\n            height: 18px;\r\n            margin-left: 21px;\r\n            transition: ${({ theme }) => theme.transitions.short};\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ToggleContainer = styled.div`\r\n    position: relative;\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectIsDarkThemeOn, toggleTheme } from \"../themeSlice\";\r\nimport { Toggle, ToggleContainer, ToggleSlider } from \"./styled\";\r\n\r\nconst ThemeSwitch = () => {\r\n    const isDarkThemeOn = useSelector(selectIsDarkThemeOn);\r\n    console.log(isDarkThemeOn);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ToggleContainer>\r\n            <Toggle onChange={() => dispatch(toggleTheme())} checked={isDarkThemeOn} id=\"toggleTheme\" type=\"checkbox\" />\r\n            <ToggleSlider htmlFor=\"toggleTheme\" />\r\n        </ToggleContainer>\r\n    );\r\n}\r\n\r\nexport default ThemeSwitch;","import styled from \"styled-components\";\r\n\r\nexport const Paragraph = styled.p`\r\n    color: ${({ theme }) => theme.colors.defaultText};\r\n    transition: ${({ theme }) => theme.transitions.short};\r\n`;","import { Paragraph } from \"./styled\";\r\n\r\nconst Information = () => (\r\n    <Paragraph>\r\n        Hi! I am Marcin!\r\n    </Paragraph>\r\n);\r\n\r\nexport default Information;","import { Container } from \"../../common/Container/styled\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\nimport ThemeSwitch from \"../themeSwitch/ThemeSwitch\";\r\nimport Information from \"./Information\";\r\n\r\nconst Author = () => (\r\n    <Container>\r\n        <Header title=\"Author\" />\r\n        <Section title=\"Marcin Kawczyński\" body={<Information/>} extraHeaderContent={<ThemeSwitch />} />\r\n    </Container>\r\n);\r\n\r\n\r\nexport default Author;","import styled from \"styled-components\";\r\n\r\nexport const LinkList = styled.ul`\r\n    display: flex;\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 0;\r\n    font-size: 18px;\r\n    border: 0px;\r\n    width: 100%;\r\n`;\r\n\r\nexport const LinkItem = styled.li`\r\n    flex-grow: 1;\r\n    text-align: center;\r\n    & a{\r\n        display: block;\r\n        padding: 10px;\r\n        background-color: ${({ theme }) => theme.colors.primary};\r\n        color: ${({ theme }) => theme.colors.primaryText};\r\n        text-decoration: none;\r\n        font-weight: 700;\r\n        transition: ${({ theme }) => theme.transitions.short};\r\n    }\r\n\r\n    & a:hover{\r\n        background-color: ${({ theme }) => theme.colors.secondary};\r\n        color: ${({ theme }) => theme.colors.secondaryText};\r\n        text-decoration: none;\r\n        font-weight: 700;\r\n        box-shadow: 0 2px 2px ${({ theme }) => theme.colors.shadow};\r\n    }\r\n`;","import { Link } from 'react-router-dom';\r\nimport { LinkItem, LinkList } from './styled';\r\n\r\nconst Menu = () => (\r\n    <nav>\r\n        <LinkList>\r\n            <LinkItem> <Link to=\"/tasks\">ToDo List</Link> </LinkItem>\r\n            <LinkItem> <Link to=\"/author\">About the Author</Link> </LinkItem>\r\n        </LinkList>\r\n    </nav>\r\n);\r\n\r\n\r\nexport default Menu;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTaskInLocalStorage = tasks => {\r\n    return localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n}\r\n\r\nexport const getTaskFromLocalStorage = () => {\r\n    return JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { getTaskFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTaskFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskID }) => {\r\n            const index = tasks.findIndex(task => task.id === taskID);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        toggleAllDone: ({ tasks }) => {\r\n            tasks.forEach(task => task.done = true);\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskID }) => {\r\n            const index = tasks.findIndex(task => task.id === taskID);\r\n            tasks.splice(index, 1);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks.map(task => {\r\n                return { ...task, id: nanoid() };\r\n            });;\r\n        },\r\n        addMultipleTasks: ({ tasks }, { payload: newTasks }) => {\r\n            newTasks.forEach(task => tasks.push({ ...task, id: nanoid() }));\r\n        },\r\n        removeAll: (store) => {\r\n            store.tasks = [];\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addTask, toggleTaskDone, toggleAllDone, removeTask, toggleHideDone, fetchExampleTasks, addMultipleTasks, setTasks, removeAll } = tasksSlice.actions;\r\n\r\nexport const selectTasksState = state => state.tasks;\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreAllTasksDone = state => selectTasks(state).every(task => task.done);\r\nexport const selectIsAnyTaskDone = state => selectTasks(state).some(task => task.done);\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const NewTaskForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n    \r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const NewTaskInput = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.colors.borders};\r\n    background: ${({ theme }) => theme.colors.secondary};\r\n    color: ${({ theme }) => theme.colors.defaultText};\r\n    transition: ${({ theme }) => theme.transitions.long};\r\n`;\r\n\r\n\r\nexport const NewTaskButton = styled.button`\r\n    border:none;\r\n    background-color: ${({ theme }) => theme.colors.primary};\r\n    color: ${({ theme }) => theme.colors.primaryText};\r\n    padding: 10px;\r\n    transition: ${({ theme }) => theme.transitions.short};\r\n    \r\n    &:hover {\r\n        filter: brightness(1.2);\r\n        transform: scale(1.07);\r\n        box-shadow: 0 0 3px ${({ theme }) => theme.colors.shadow};\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(0.9);\r\n        transform: scale(1.05);\r\n    }\r\n`;","import { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { useRef, useState } from \"react\";\r\nimport { NewTaskForm, NewTaskInput, NewTaskButton } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n    const inputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        inputRef.current.focus();\r\n        const content = newTaskContent.replace(/ +(?= )/g, '').trim();\r\n        setNewTaskContent(content);\r\n        if (content !== \"\") {\r\n            dispatch(addTask({\r\n                content: newTaskContent,\r\n                done: false,\r\n                id: nanoid(),\r\n            }));\r\n            setNewTaskContent(\"\");\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <NewTaskForm onSubmit={onFormSubmit}>\r\n            <NewTaskInput\r\n                autoFocus\r\n                placeholder=\"What to do?\"\r\n                value={newTaskContent}\r\n                onChange={(event) => setNewTaskContent(event.target.value)}\r\n                ref={inputRef}\r\n            />\r\n            <NewTaskButton>Add Task</NewTaskButton>\r\n        </NewTaskForm>);\r\n};\r\n\r\nexport default Form;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`    \r\n    background: transparent;\r\n    color: ${({ theme }) => theme.colors.primary};\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    transition: ${({ theme }) => theme.transitions.middle};\r\n\r\n    @media(max-width: 767px) {\r\n        flex-basis: 100%;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(1.3);\r\n        transform: scale(1.07);\r\n        text-shadow: 0 0 5px ${({ theme }) => theme.colors.shadow};\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.colors.disabled};\r\n        cursor: not-allowed;\r\n        transform: scale(1);\r\n    }\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { removeAll, selectAreAllTasksDone, selectAreTasksEmpty, selectHideDone, selectIsAnyTaskDone, toggleAllDone, toggleHideDone } from \"../tasksSlice\";\r\nimport { ButtonsContainer, Button } from \"./styled\";\r\nimport { fetchExampleTasks } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const hideDone = useSelector(selectHideDone);\r\n    const areAllDone = useSelector(selectAreAllTasksDone);\r\n    const isAnyDone = useSelector(selectIsAnyTaskDone);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ButtonsContainer>\r\n            <Button onClick={() => dispatch(fetchExampleTasks())}> Get Sample Tasks </Button>\r\n            {!useSelector(selectAreTasksEmpty) && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())} disabled={!isAnyDone}>\r\n                        {hideDone ? \"Show\" : \"Hide\"} done\r\n                    </Button>\r\n                    <Button onClick={() => dispatch(toggleAllDone())} disabled={areAllDone}>\r\n                        Mark All as Done\r\n                    </Button>\r\n                    <Button onClick={() => dispatch(removeAll())}>\r\n                        Remove All\r\n                    </Button>\r\n                </>)\r\n            }\r\n        </ButtonsContainer>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Buttons;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledTaskList = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const TaskItem = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const TaskButton = styled.button`\r\n    border: 0;\r\n    width: 30px;\r\n    height: 30px;\r\n    color: ${({ theme }) => theme.colors.primaryText};\r\n    padding: 0;\r\n    transition: ${({ theme }) => theme.transitions.short};\r\n    cursor: pointer;\r\n\r\n    ${({ done }) => done && css`\r\n        background-color: ${({ theme }) => theme.colors.doneBox};\r\n        &:hover {\r\n            filter: brightness(1.5);\r\n        }\r\n    `}\r\n\r\n    ${({ removeButton }) => removeButton && css`\r\n        background-color: ${({ theme }) => theme.colors.removeBox};\r\n        &:hover {\r\n            filter: brightness(1.5);\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const TaskContent = styled.span`\r\n    color:  ${({ theme }) => theme.colors.defaultText};\r\n    transition: ${({ theme }) => theme.transitions.middle};\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n        color: ${({ theme }) => theme.colors.disabled};\r\n    `}\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { removeTask, selectTasksState, toggleTaskDone } from \"../tasksSlice\";\r\nimport { TaskItem, TaskButton, TaskContent, StyledTaskList } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n    const { hideDone, tasks } = useSelector(selectTasksState);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <StyledTaskList>\r\n            {tasks.map(task => (\r\n                <TaskItem key={task.id} hidden={task.done && hideDone}>\r\n                    <TaskButton onClick={() => dispatch(toggleTaskDone(task.id))} done>\r\n                        {task.done ? '✓' : ''}\r\n                    </TaskButton>\r\n                    <TaskContent done={task.done}>\r\n                        {task.content}\r\n                    </TaskContent>\r\n                    <TaskButton onClick={() => dispatch(removeTask(task.id))} removeButton>🗑</TaskButton>\r\n                </TaskItem>\r\n            ))}\r\n        </StyledTaskList>\r\n    );\r\n}\r\n\r\nexport default TaskList;","import Form from \"./Form\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport { Container } from \"../../common/Container/styled\";\nimport TaskList from \"./TaskList\";\nimport ThemeSwitch from \"../themeSwitch/ThemeSwitch\";\n\nfunction Tasks() {\n\n  return (\n    <Container>\n      <Header title=\"ToDo List\" />\n      <Section title=\"Add a new Task\" body={<Form />} extraHeaderContent={<ThemeSwitch />} />\n      <Section\n        title=\"List of Tasks\"\n        extraHeaderContent={<Buttons />}\n        body={<TaskList />}\n      />\n    </Container>\n  );\n}\n\nexport default Tasks;\n","import styled from \"styled-components\";\r\n\r\nconst AppWrapper = styled.div`\r\n    color: ${({ theme }) => theme.colors.defaultText};\r\n    border: 0;\r\n    padding:0;\r\n    margin: 0;\r\n    width: 100%;\r\n    min-height: 100vh;\r\n    background-color: ${({ theme }) => theme.colors.mainBackground};\r\n    transition: ${({ theme }) => theme.transitions.long} ease-in-out;\r\n`;\r\n\r\n\r\nexport default AppWrapper;","export const defaultTheme = {\r\n    colors: {\r\n        primary: \"rgb(0,128,128)\",\r\n        primaryText: \"#FFF\",\r\n        secondary: \"#FFF\",\r\n        secondaryText: \"rgb(0,128,128)\",\r\n        disabled: \"#AAA\",\r\n        background: \"#e8e8ee;\",\r\n        shadow: \"rgba(31, 31, 31, 0.5)\",\r\n        borders: \"#DDD\",\r\n        doneBox: \"#218321\",\r\n        removeBox: \"#bb2525\",\r\n        defaultText: \"#111\",\r\n        mainBackground: \"#e8e8ee\",\r\n    },\r\n    transitions : {\r\n        short: \"0.2s\",\r\n        middle: \"0.4s\",\r\n        long: \"1s\",\r\n    }\r\n}\r\n\r\nexport const darkTheme = {\r\n    colors: {\r\n        primary: \"#d8a027\",\r\n        primaryText: \"#111\",\r\n        secondary: \"#151515\",\r\n        secondaryText: \"#d8a027\",\r\n        disabled: \"#666\",\r\n        background: \"#222\",\r\n        shadow: \"rgba(255, 255, 255, 0.7)\",\r\n        borders: \"#DDD\",\r\n        doneBox: \"#db8400\",\r\n        removeBox: \"#ad2614\",\r\n        defaultText: \"#ebc791\",\r\n        mainBackground: \"#050505\",\r\n    },\r\n    transitions : {\r\n        short: \"0.2s\",\r\n        middle: \"0.5s\",\r\n        long: \"1s\",\r\n    }\r\n}","import { Switch, Route, HashRouter, Redirect } from \"react-router-dom\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { GlobalStyles } from \"./GlobalStyles\";\r\nimport Author from \"./features/author/Author\";\r\nimport Menu from \"./common/Menu\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\nimport AppWrapper from \"./common/AppWrapper\";\r\nimport { defaultTheme, darkTheme } from \"./utils/themes\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectIsDarkThemeOn } from \"./features/themeSwitch/themeSlice\";\r\n\r\nconst App = () => {\r\n    const selectedTheme = useSelector(selectIsDarkThemeOn) ? darkTheme : defaultTheme;\r\n    return (\r\n        <HashRouter>\r\n            <ThemeProvider theme={selectedTheme}>\r\n                <GlobalStyles />\r\n                <AppWrapper>\r\n                    <Menu />\r\n                    <Switch>\r\n                        <Route path=\"/tasks\">\r\n                            <Tasks />\r\n                        </Route>\r\n                        <Route path=\"/author\">\r\n                            <Author />\r\n                        </Route>\r\n                        <Route path=\"/\">\r\n                            <Redirect to=\"/tasks\" />\r\n                        </Route>\r\n                    </Switch>\r\n                </AppWrapper>\r\n            </ThemeProvider>\r\n        </HashRouter>\r\n    )\r\n};\r\n\r\nexport default App;","export const getExampleTasks = async () => {\r\n    \r\n    const response = await fetch(\"/SimpleToDoList/exampleTasks.json\");\r\n    if (!response.ok) {\r\n        new Error((response).statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeLatest, takeEvery, call, put, select } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTaskInLocalStorage } from \"./tasksLocalStorage\";\r\nimport { addMultipleTasks, fetchExampleTasks, selectTasks } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTaskHandler() {\r\n    try {\r\n        const sampleTasks = yield call(getExampleTasks);\r\n        yield put(addMultipleTasks(sampleTasks));\r\n    } catch (error) {\r\n        call(alert, \"Something went wrong!\");\r\n    }\r\n}\r\n\r\nfunction* saveTaskInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTaskInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTaskHandler);\r\n    yield takeEvery(\"*\", saveTaskInLocalStorageHandler);\r\n}","import { takeEvery, call, select } from \"redux-saga/effects\";\r\nimport { saveThemeInLocalStorage } from \"./themeLocalStorage\";\r\nimport { selectIsDarkThemeOn } from \"./themeSlice\";\r\n\r\nfunction* saveThemeInLocalStorageHandler() {\r\n    const theme = yield select(selectIsDarkThemeOn);\r\n    yield call(saveThemeInLocalStorage, theme);\r\n}\r\n\r\nexport function* themeSaga() {\r\n    yield takeEvery(\"*\", saveThemeInLocalStorageHandler);\r\n}","import { all } from \"@redux-saga/core/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\nimport { themeSaga } from \"./features/themeSwitch/themeSaga\";\r\n\r\nfunction* rootSaga () {\r\n    yield all([\r\n        tasksSaga(),\r\n        themeSaga(),\r\n    ])\r\n}\r\n\r\nexport default rootSaga;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"@redux-saga/core\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport themeReducer from \"./features/themeSwitch/themeSlice\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        theme: themeReducer,\r\n    },\r\n    middleware: [sagaMiddleware]\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport App from \"./App\";\nimport store from \"./store\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}