{"version":3,"sources":["Form/index.js","Form/useFormActions.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","utils/useTasks.js","utils/useLocalStorageState.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTaskFunction","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onFormSubmit","event","preventDefault","current","focus","replace","trim","useFormActions","addNewTask","className","onSubmit","autoFocus","placeholder","value","onChange","target","ref","Tasks","props","tasks","map","task","done","hideDone","onClick","toggleTaskDone","id","content","removeTask","Buttons","length","toggleHideDone","setAllDone","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","useTasks","keyName","initialValue","localStorageState","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","useLocalStorageState","setTasks","filter","App","setHideDone","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAuBeA,EAlBF,SAAC,GAAoB,IAE9B,ECL0B,SAACC,GAE3B,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEMC,EAAWC,iBAAO,MAaxB,MAAO,CAAEC,aAXY,SAACC,GAClBA,EAAMC,iBACNJ,EAASK,QAAQC,QACjBP,EAAkBD,EAAeS,QAAQ,WAAY,IAAIC,QAClC,KAAnBV,IACAF,EAAmBE,GACnBC,EAAkB,MAKHD,iBAAgBC,oBAAmBC,YDZYS,CAFzC,EAAjBC,YAEJR,EAAR,EAAQA,aAAcJ,EAAtB,EAAsBA,eAAgBC,EAAtC,EAAsCA,kBAAmBC,EAAzD,EAAyDA,SAEzD,OACI,uBAAMW,UAAU,OAAOC,SAAUV,EAAjC,UACI,uBACIS,UAAU,cACVE,WAAS,EACTC,YAAY,cACZC,MAAOjB,EACPkB,SAAU,SAACb,GAAD,OAAWJ,EAAkBI,EAAMc,OAAOF,QACpDG,IAAKlB,IAET,wBAAQW,UAAU,eAAlB,0BEDGQ,G,MAhBD,SAACC,GAAD,OACV,oBAAIT,UAAU,QAAd,SACKS,EAAMC,MAAMC,KAAI,SAAAC,GAAI,OACjB,qBAAkBZ,UAAS,qBAAgBY,EAAKC,MAAQJ,EAAMK,SAAW,uBAAyB,IAAlG,UACI,wBAAQC,QAAS,kBAAMN,EAAMO,eAAeJ,EAAKK,KAAKjB,UAAU,0CAAhE,SACCY,EAAKC,KAAO,SAAM,KAEnB,sBAAMb,UAAS,wBAAmBY,EAAKC,KAAO,wBAA0B,IAAxE,SACCD,EAAKM,UAEN,wBAAQH,QAAS,kBAAMN,EAAMU,WAAWP,EAAKK,KAAKjB,UAAU,sCAA5D,4BAPKY,EAAKK,WCSXG,G,MAZC,SAACX,GAAD,OACXA,EAAMC,MAAMW,OAAS,GACrB,sBAAKrB,UAAU,UAAf,UACG,yBAAQe,QAASN,EAAMa,eAAgBtB,UAAU,kBAAjD,UACKS,EAAMK,SAAW,OAAS,OAD/B,WAGA,wBAAQC,QAASN,EAAMc,WAAYvB,UAAU,kBAAkBwB,SAAUf,EAAMC,MAAMe,OAAM,qBAAEZ,QAA7F,mCCMOa,G,MAZC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAMC,EAAf,EAAeA,mBAAf,OACZ,0BAAS7B,UAAU,UAAnB,UACI,yBAAQA,UAAU,kBAAlB,UACI,oBAAIA,UAAU,iBAAd,SAAgC2B,IAC/BE,KAEL,qBAAK7B,UAAU,gBAAf,SACK4B,SCHEE,EANA,SAAC,GAAD,IAAEH,EAAF,EAAEA,MAAF,OACX,iCACA,6BAAKA,OCMMI,G,MANG,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACd,sBAAMhC,UAAU,YAAhB,SACKgC,M,cCFIC,EAAW,WAEpB,MCFgC,SAACC,EAASC,GAC1C,IAQA,EAA0BjD,oBARF,WACpB,IAAMkD,EAAoBC,aAAaC,QAAQJ,GAC/C,OAA0B,OAAtBE,EACOD,EAEJI,KAAKC,MAAMJ,MAGtB,mBAAOK,EAAP,KAAcC,EAAd,KAMA,OAJAC,qBAAU,WACNN,aAAaO,QAAQV,EAASK,KAAKM,UAAUJ,MAE9C,CAACA,IACG,CAACA,EAAOC,GDbWI,CAAqB,WAAY,IAA3D,mBAAOpC,EAAP,KAAcqC,EAAd,KA4BA,MAAO,CAAErC,QAAOS,WA1BG,SAACF,GAChB8B,GAAS,SAAArC,GAAK,OAAIA,EAAMsC,QAAO,SAAApC,GAAI,OAAIA,EAAKK,KAAOA,SAyB3BD,eAtBL,SAACC,GACpB8B,GAAS,SAAArC,GAAK,OAAIA,EAAMC,KAAI,SAAAC,GACxB,OAAIA,EAAKK,KAAOA,EACL,2BAAKL,GAAZ,IAAkBC,MAAOD,EAAKC,OAE3BD,SAiB6BW,WAZzB,WACfwB,GAAS,SAAArC,GAAK,OAAIA,EAAMC,KAAI,SAAAC,GAAI,kCAAUA,GAAV,IAAgBC,MAAOD,EAAKC,cAWRd,WARrC,SAACmB,GAChB6B,GAAS,SAAArC,GAAK,4BAAQA,GAAR,CAAe,CACzBQ,UACAL,MAAM,EACNI,GAAIP,EAAMW,OAASX,EAAMA,EAAMW,OAAS,GAAGJ,GAAK,EAAI,WEcjDgC,MAjCf,WACE,MAAgC/D,oBAAS,GAAzC,mBAAO4B,EAAP,KAAiBoC,EAAjB,KACA,EAAsEjB,IAA9DvB,EAAR,EAAQA,MAAOS,EAAf,EAAeA,WAAYH,EAA3B,EAA2BA,eAAgBO,EAA3C,EAA2CA,WAAYxB,EAAvD,EAAuDA,WAMvD,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAQ4B,MAAM,cACd,cAAC,EAAD,CAASA,MAAM,iBAAiBC,KAAM,cAAE,EAAF,CAAO7B,WAAYA,MACzD,cAAC,EAAD,CACE4B,MAAM,gBACNE,mBACE,cAAC,EAAD,CACEnB,MAAOA,EACPI,SAAUA,EACVQ,eAda,WACrB4B,GAAY,SAAApC,GAAQ,OAAKA,MAcjBS,WAAYA,IAEhBK,KACE,cAAC,EAAD,CACElB,MAAOA,EACPI,SAAUA,EACVK,WAAYA,EACZH,eAAgBA,UCvBbmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a5b2d12b.chunk.js","sourcesContent":["import { useFormActions } from \"./useFormActions\";\r\nimport \"./style.css\";\r\n\r\n\r\n\r\nconst Form = ({ addNewTask }) => {\r\n\r\n    const { onFormSubmit, newTaskContent, setNewTaskContent, inputRef } = useFormActions(addNewTask);\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                className=\"form__input\"\r\n                autoFocus\r\n                placeholder=\"What to do?\"\r\n                value={newTaskContent}\r\n                onChange={(event) => setNewTaskContent(event.target.value)}\r\n                ref={inputRef}\r\n            />\r\n            <button className=\"form__button\">Add Task</button>\r\n        </form>);\r\n};\r\n\r\nexport default Form;","import { useRef, useState } from \"react\";\r\n\r\nexport const useFormActions = (addNewTaskFunction) => {\r\n\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        inputRef.current.focus();\r\n        setNewTaskContent(newTaskContent.replace(/ +(?= )/g, '').trim());\r\n        if (newTaskContent !== \"\") {\r\n            addNewTaskFunction(newTaskContent);\r\n            setNewTaskContent(\"\");\r\n        }\r\n\r\n    }\r\n\r\n    return { onFormSubmit, newTaskContent, setNewTaskContent, inputRef }\r\n}","import \"./style.css\";\r\n\r\nconst Tasks = (props) => (\r\n    <ul className=\"tasks\">\r\n        {props.tasks.map(task => (\r\n            <li key={task.id} className={`tasks__item${task.done && props.hideDone ? \" tasks__item--hidden\" : \"\"}`}>\r\n                <button onClick={() => props.toggleTaskDone(task.id)} className=\"tasks__button tasks__button--toggleDone\">\r\n                {task.done ? 'âœ“' : ''}\r\n                </button>\r\n                <span className={`tasks__content${task.done ? \" tasks__content--done\" : \"\"}`}>\r\n                {task.content}\r\n                </span>\r\n                <button onClick={() => props.removeTask(task.id)} className=\"tasks__button tasks__button--remove\">ðŸ—‘</button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;","import \"./style.css\";\r\n\r\nconst Buttons = (props) => (\r\n     props.tasks.length > 0 && (\r\n     <div className=\"buttons\">\r\n        <button onClick={props.toggleHideDone} className=\"buttons__button\">\r\n            {props.hideDone ? \"Show\" : \"Hide\"} done\r\n        </button>\r\n        <button onClick={props.setAllDone} className=\"buttons__button\" disabled={props.tasks.every(({done}) => done)}>\r\n            Mark All as Done\r\n        </button>\r\n    </div>)\r\n);\r\n\r\nexport default Buttons;","import \"./style.css\";\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <section className=\"section\">\r\n        <header className=\"section__header\">\r\n            <h2 className=\"section__title\">{title}</h2>\r\n            {extraHeaderContent}\r\n        </header>\r\n        <div className=\"section__body\">\r\n            {body}\r\n        </div>\r\n    </section>\r\n);\r\n\r\nexport default Section;","const Header = ({title}) => (\r\n    <header>\r\n    <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import \"./style.css\";\r\n\r\nconst Container = ({children}) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import { useLocalStorageState } from \"./useLocalStorageState\";\r\n\r\nexport const useTasks = () => {\r\n\r\n    const [tasks, setTasks] = useLocalStorageState(\"taskList\", []);\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id));\r\n    }\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done };\r\n            }\r\n            return task;\r\n        }))\r\n    }\r\n\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task => ({ ...task, done: !task.done })));\r\n    }\r\n\r\n    const addNewTask = (content) => {\r\n        setTasks(tasks => [...tasks, {\r\n            content,\r\n            done: false,\r\n            id: tasks.length ? tasks[tasks.length - 1].id + 1 : 0,\r\n        }]);\r\n    }\r\n\r\n    return { tasks, removeTask, toggleTaskDone, setAllDone, addNewTask };\r\n\r\n}","import { useEffect, useState } from \"react\";\r\n\r\nexport const useLocalStorageState = (keyName, initialValue) => {\r\n    const getInitialState = () => {\r\n        const localStorageState = localStorage.getItem(keyName);\r\n        if (localStorageState === null) {\r\n            return initialValue;\r\n        }\r\n        return JSON.parse(localStorageState);\r\n    }\r\n\r\n    const [state, setState] = useState(getInitialState);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(keyName, JSON.stringify(state));\r\n        // eslint-disable-next-line\r\n    }, [state]);\r\n    return [state, setState];\r\n}","import Form from \"./Form\";\nimport Tasks from \"./Tasks\"\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport { useState } from \"react\";\nimport { useTasks } from \"./utils/useTasks\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const { tasks, removeTask, toggleTaskDone, setAllDone, addNewTask } = useTasks();\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  }\n\n  return (\n    <Container>\n      <Header title=\"ToDo List\" />\n      <Section title=\"Add a new Task\" body={< Form addNewTask={addNewTask} />} />\n      <Section\n        title=\"List of Tasks\"\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />}\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}