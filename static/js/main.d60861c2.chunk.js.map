{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","replace","trim","autoFocus","placeholder","value","onChange","target","Tasks","props","tasks","map","task","done","hideDone","onClick","toggleTaskDone","id","content","removeTask","Buttons","length","toggleHideDone","setAllDone","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","setHideDone","setTasks","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d60861c2.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({addNewTask}) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        setNewTaskContent(newTaskContent.replace(/ +(?= )/g, '').trim());\r\n        if (newTaskContent !== \"\") {\r\n            addNewTask(newTaskContent);\r\n            setNewTaskContent(\"\");\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                className=\"form__input\"\r\n                autoFocus\r\n                placeholder=\"What to do?\"\r\n                value={newTaskContent}\r\n                onChange={(event) => setNewTaskContent(event.target.value)}\r\n            />\r\n            <button className=\"form__button\">Add Task</button>\r\n        </form>);\r\n};\r\n\r\nexport default Form;","import \"./style.css\";\r\n\r\nconst Tasks = (props) => (\r\n    <ul className=\"tasks\">\r\n        {props.tasks.map(task => (\r\n            <li key={task.id} className={`tasks__item${task.done && props.hideDone ? \" tasks__item--hidden\" : \"\"}`}>\r\n                \r\n                <button onClick={() => props.toggleTaskDone(task.id)} className=\"tasks__button tasks__button--toggleDone\">\r\n                {task.done ? 'âœ“' : ''}\r\n                </button>\r\n                <span className={`tasks__content${task.done ? \" tasks__content--done\" : \"\"}`}>\r\n                {task.content}\r\n                </span>\r\n                <button onClick={() => props.removeTask(task.id)} className=\"tasks__button tasks__button--remove\">ðŸ—‘</button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;","import \"./style.css\";\r\n\r\nconst Buttons = (props) => (\r\n     props.tasks.length > 0 && (\r\n     <div className=\"buttons\">\r\n        <button onClick={props.toggleHideDone} className=\"buttons__button\">\r\n            {props.hideDone ? \"Show\" : \"Hide\"} done\r\n        </button>\r\n        <button onClick={props.setAllDone} className=\"buttons__button\" disabled={props.tasks.every(({done}) => done)}>\r\n            Mark All as Done\r\n        </button>\r\n    </div>)\r\n);\r\n\r\nexport default Buttons;","import \"./style.css\";\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <section className=\"section\">\r\n        <header className=\"section__header\">\r\n            <h2 className=\"section__title\">{title}</h2>\r\n            {extraHeaderContent}\r\n        </header>\r\n        <div className=\"section__body\">\r\n            {body}\r\n        </div>\r\n    </section>\r\n);\r\n\r\nexport default Section;","const Header = ({title}) => (\r\n    <header>\r\n    <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import \"./style.css\";\r\n\r\nconst Container = ({children}) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import Form from \"./Form\";\nimport Tasks from \"./Tasks\"\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    setTasks(JSON.parse(localStorage.getItem(\"taskList\")));\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"taskList\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  }\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  }\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n      return task;\n    }))\n  }\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({ ...task, done: !task.done })));\n  }\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [...tasks, {\n      content,\n      done: false,\n      id: tasks.length ? tasks[tasks.length - 1].id + 1 : 0,\n    }]);\n  }\n\n  return (\n    <Container>\n      <Header title=\"ToDo List\" />\n      <Section title=\"Add a new Task\" body={< Form addNewTask={addNewTask} />} />\n      <Section\n        title=\"List of Tasks\"\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />}\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}